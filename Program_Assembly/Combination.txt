lw   0 1 n     $1 = 4  
    lw   0 2 r     $2 = 2  
    lw   0 6 end   save end in $6 
    sw   5 6 stack save end = stack address = 0
comb  lw   0 6 pos1   $6 = 1 
    add  5 6 5      increment stack pointer
    sw   5 1 stack  store $1 in stack ^(.*)(\n\1)+$ 
    add  5 6 5      increment stack pointer 
    sw   5 2 stack  store $2 in stack  
    beq  2 0 load   if ( r == 0 ) jump to load  
    beq  1 2 load   if ( r == n ) jump to load  
    add  5 6 5      increment stack pointer  
    lw   0 6 neg1   $6 = -1 
    add  1 6 1      n = n + 1 \n  +
    lw   0 6 one    $6  = address of one 
    sw   5 6 stack  stored address of one in stack  
    beq  0 0 comb   jump to combination  
first lw   0 6 neg1  $6 = -1 
    add  2 6 2       r = r -1 
    lw   0 6 root    $6 = address of root 
    sw   5 6 stack   stored address of root in stack 
    beq  0 0 comb    jump to combination 
load  lw   0 6 neg1    $6 = -1  
    lw   5 2 stack   recover $2 from stack
    add  5 6 5       decrement stack pointer 
    lw   5 1 stack   recover $1 from stack 
    add  5 6 5       decrement stack pointer 
    lw   5 4 stack   recover function from stack to $4 
    lw   0 6 pos1    $6 = 1
    add  3 6 3       $3= $3 + 1
    jalr 4 7         jump to address contain in $4 save return address in $7 
plus  lw   0 6 neg1    $6 = -1 
    add  3 6 3       $3 = $3 - 1
    add  5 6 5       decrement stack pointer 
    beq  0 0 load    jump to load   
stop   halt end of program  


com .fill comb 
n   .fill 7 
r   .fill 2 
neg1 .fill -1  
pos1 .fill  1   
one  .fill first
road .fill load  
root  .fill plus  
end .fill stop  
stack .fill 0 